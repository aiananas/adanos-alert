type Query {
    rules: [Rule!]!
    rule(id: ID!): Rule

    users(first: Int=0, limit: Int=20): UserPagination!
    user(id: ID!): User
}

type Mutation {
    addRule(rule: NewRule!): Rule!
    updateRule(id: ID!, rule: NewRule!) :Rule!
    deleteRule(id: ID!) :Rule!
    addUser(user: NewUser!): User!
    updateUser(id: ID!, user: NewUser!) :User!
    deleteUser(id: ID!) :User!
}

#####################################################################

type Rule {
    id: ID!
    name: String!
    description: String!
    interval: Int!
    threshold: Int!
    priority: Int!
    rule: String!
    template: String!
    summary_template: String!
    triggers: [Trigger!]!
    status: String!
    created_at: String!
    updated_at: String!
}

type Trigger {
    id: ID!
    pre_condition: String!
    action: String!
}

type User {
    id: ID!
    name: String!
    metas: [UserMeta!]!
    status: String!
    created_at: String!
    updated_at: String!
}

type UserMeta {
    key: String!
    value: String!
}

type UserPagination {
    hasNext: Boolean!
    users: [User!]!
    cursor: Int!
}

####################################################################

input NewTrigger {
    pre_condition: String!
    action: String!
}

input NewRule {
    name: String!
    description: String
    interval: Int!
    threshold: Int!
    priority: Int!
    rule: String!
    template: String
    summary_template: String
    triggers: [NewTrigger]
    status: String
}

input NewUserMeta {
    key: String!
    value: String!
}

input NewUser {
    name: String!
    metas: [NewUserMeta!]!
    status: String!
}